// Методы indexOf/lastIndexOf осуществляют поиск перебором
// Если нужно проверить, существует ли значение в массиве – его нужно перебрать.
// Только так. Внутренняя реализация indexOf/lastIndexOf осуществляет полный перебор,
// аналогичный циклу for по массиву. Чем длиннее массив, тем дольше он будет работать.


// Метод «arr.indexOf(searchElement[, fromIndex])»
// возвращает номер элемента searchElement в массиве arr или -1, если его нет.
// Поиск начинается с номера fromIndex, если он указан. Если нет – с начала массива.

let arr11 = [1, 0, false];

// Как вы могли заметить, по синтаксису он полностью аналогичен методу indexOf для строк.
console.log(arr11.indexOf(1));     // 0
console.log(arr11.indexOf(0));     // 1
console.log(arr11.indexOf(false)); // 2


// Метод «arr.lastIndexOf(searchElement[, fromIndex])»
// ищет справа-налево: с конца массива или с номера fromIndex, если он указан.

let arr12 = [ 1, 4, 6, 7, 7, 1, 1, 1];
console.log(arr12.lastIndexOf(1)); // 7

// Разница indexOf() и findIndex()
//Основное отличие - это параметры этих функций:
//  Array.prototype.indexOf() ожидает значение как первый параметр.
//      Это хорошо для поиска индекса в массивах ПРИМИТИВНЫХ типов.
//  Array.prototype.findIndex() ожидает обратного вызова в качестве первого параметра.
//      Используйте это, если вам нужен индекс в массивах с не примитивными типами (например, объекты),
// или ваше условие поиска более сложное, чем просто значение.
//FindIndex полезен, если вы хотите найти первый элемент, который соответствует вашему предикату

let ages = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];
function isGreaterThanNine(age): boolean {
    return age > 9;
}

let moreThanNine = ages.findIndex(isGreaterThanNine); // возвращает 9. Это индекс
                                                        // первого элемента, которы больше 9. Это 10.
console.log(moreThanNine); // 9.
